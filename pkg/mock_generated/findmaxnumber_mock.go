// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cyyber/FindMaxNumberRPC/pkg/generated (interfaces: FindMaxNumberClient,FindMaxNumber_GetMaxNumberClient)

// Package mock_generated is a generated GoMock package.
package mock_generated

import (
	context "context"
	generated "github.com/cyyber/FindMaxNumberRPC/pkg/generated"
	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	reflect "reflect"
)

// MockFindMaxNumberClient is a mock of FindMaxNumberClient interface
type MockFindMaxNumberClient struct {
	ctrl     *gomock.Controller
	recorder *MockFindMaxNumberClientMockRecorder
}

// MockFindMaxNumberClientMockRecorder is the mock recorder for MockFindMaxNumberClient
type MockFindMaxNumberClientMockRecorder struct {
	mock *MockFindMaxNumberClient
}

// NewMockFindMaxNumberClient creates a new mock instance
func NewMockFindMaxNumberClient(ctrl *gomock.Controller) *MockFindMaxNumberClient {
	mock := &MockFindMaxNumberClient{ctrl: ctrl}
	mock.recorder = &MockFindMaxNumberClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFindMaxNumberClient) EXPECT() *MockFindMaxNumberClientMockRecorder {
	return m.recorder
}

// GetMaxNumber mocks base method
func (m *MockFindMaxNumberClient) GetMaxNumber(arg0 context.Context, arg1 ...grpc.CallOption) (generated.FindMaxNumber_GetMaxNumberClient, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMaxNumber", varargs...)
	ret0, _ := ret[0].(generated.FindMaxNumber_GetMaxNumberClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaxNumber indicates an expected call of GetMaxNumber
func (mr *MockFindMaxNumberClientMockRecorder) GetMaxNumber(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxNumber", reflect.TypeOf((*MockFindMaxNumberClient)(nil).GetMaxNumber), varargs...)
}

// MockFindMaxNumber_GetMaxNumberClient is a mock of FindMaxNumber_GetMaxNumberClient interface
type MockFindMaxNumber_GetMaxNumberClient struct {
	ctrl     *gomock.Controller
	recorder *MockFindMaxNumber_GetMaxNumberClientMockRecorder
}

// MockFindMaxNumber_GetMaxNumberClientMockRecorder is the mock recorder for MockFindMaxNumber_GetMaxNumberClient
type MockFindMaxNumber_GetMaxNumberClientMockRecorder struct {
	mock *MockFindMaxNumber_GetMaxNumberClient
}

// NewMockFindMaxNumber_GetMaxNumberClient creates a new mock instance
func NewMockFindMaxNumber_GetMaxNumberClient(ctrl *gomock.Controller) *MockFindMaxNumber_GetMaxNumberClient {
	mock := &MockFindMaxNumber_GetMaxNumberClient{ctrl: ctrl}
	mock.recorder = &MockFindMaxNumber_GetMaxNumberClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFindMaxNumber_GetMaxNumberClient) EXPECT() *MockFindMaxNumber_GetMaxNumberClientMockRecorder {
	return m.recorder
}

// CloseSend mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) CloseSend() error {
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) CloseSend() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).CloseSend))
}

// Context mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) Context() context.Context {
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) Context() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).Context))
}

// Header mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) Header() (metadata.MD, error) {
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) Header() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).Header))
}

// Recv mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) Recv() (*generated.Number, error) {
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*generated.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) Recv() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).Recv))
}

// RecvMsg mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) RecvMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "RecvMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) RecvMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).RecvMsg), arg0)
}

// Send mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) Send(arg0 *generated.Number) error {
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).Send), arg0)
}

// SendMsg mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) SendMsg(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "SendMsg", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) SendMsg(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).SendMsg), arg0)
}

// Trailer mocks base method
func (m *MockFindMaxNumber_GetMaxNumberClient) Trailer() metadata.MD {
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer
func (mr *MockFindMaxNumber_GetMaxNumberClientMockRecorder) Trailer() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockFindMaxNumber_GetMaxNumberClient)(nil).Trailer))
}
